import org.gradle.internal.os.OperatingSystem

ext.isNoNTCore = hasProperty("no-network-tables")
ext.forceTestExport = hasProperty("export-test")

// Compiler-Optimize the binary. This may be potentially unsafe, but will make Toast faster and more
// efficient
ext.isOptimizedBinary = hasProperty("opt")
// Only use this if you're a speed demon. May make Toast unstable, but it will make it faster. I take no
// responsibility for crashes that occur with this optimization level.
ext.isHarshOptimize = hasProperty("harsh")

ext.gcc_compiler_pp = System.getenv("CXX")

ext.component_spec = { comp, project ->
    comp.binaries.withType(NativeBinarySpec) {
        if (toolChain in VisualCpp) {
            if (isOptimizedBinary && !isHarshOptimize) {
                // /O2 is known to eat up more stack space than we need for large memory blocks (i.e. the Shared pool),
                // and /O1 is less likely to intefere with debugging. While this is usually a release binary, /O1 is preferred
                // as the Toast Crash Handler steps through the backtrace to find the source of an error, and so debugging
                // information is still important. 
                // It should be noted that this backtrace crawling will not affect modules, but WILL affect Toast itself. If
                // Toast itself crashes, we would like as much information as possible. Module debugging ability will be defined
                // as what they choose in their optimization flags.
                cppCompiler.args "/O1"
                cppCompiler.define "COMPILER_OPTIMIZE"
            } else if (isHarshOptimize) {
                // Fuck it
                cppCompiler.args "/O2"
                cppCompiler.define "COMPILER_OPTIMIZE_HARSH"
            }
        } else {
            // See above for debug info
            if (isOptimizedBinary && !isHarshOptimize) {
                cppCompiler.args "-Og"
                cppCompiler.define "COMPILER_OPTIMIZE"
            } else if (isHarshOptimize) {
                cppCompiler.args "-Ofast"   // -O3 is inherited by -Ofast
                cppCompiler.define "COMPILER_OPTIMIZE_HARSH"
            }

            if (it in SharedLibraryBinarySpec) {
                linker.args "-shared"
            }
            linker.args "-Wl,-rpath,.,-rpath,./toast/modules,-rpath,./toast/libs"
        }
        project.ext.binaries_files << it
    }

    // if (isArm) {
        // comp.targetPlatform 'roborio-arm'
    // } else {
        //comp.targetPlatform 'any-32'
        //comp.targetPlatform 'any-64'
    // }
}


ext.export_directory = new File(rootProject.projectDir, "export")

ext.non_specific_os = { os ->
    if (os.isWindows()) {
        return "windows"
    } else if (os.isMacOsX()) {
        return "mac"
    } else if (os.isLinux()) {
        return "linux"
    }
    return "unknown"
}

ext.exportPath = { binary -> 
    def path = new File(ext.export_directory.absolutePath + "/" +
        non_specific_os(binary.targetPlatform.operatingSystem) + "/" +
        binary.targetPlatform.architecture.name.replace("86-64", "64") + "/")
    
    return path;
}

ext.copySharedBinary = { binary ->
    def path = exportPath(binary)
    
    project.copy {
        from binary.sharedLibraryFile
        into path
    }
}

ext.copyExecBinary = { binary ->
    def path = exportPath(binary)
    
    project.copy {
        from binary.executable.file
        into path
    }
}

ext.test_path = {
    new File(rootProject.projectDir, "export/test")
}
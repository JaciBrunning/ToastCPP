apply from: 'libraries/libraries.gradle'

model {
    components {
        toast_core(NativeLibrarySpec) {
            component_spec(it, project)
            targetPlatform "roborio-arm"
            targetPlatform "any-32"
            targetPlatform "any-64"
            binaries.withType(NativeBinarySpec) {
                // Mongoose
                cppCompiler.define "MG_DISABLE_MQTT"
                cppCompiler.define "MG_DISABLE_JSON_RPC"
                cppCompiler.define "MG_DISABLE_JSON_RPC"
                cppCompiler.define "MG_DISABLE_HTTP_KEEP_ALIVE"
            }

            sources {
                cpp {
                    source {
                        srcDirs = []
                        srcDirs += libraries.src()
                        srcDirs += ['src', 'interchange/prebuild/src']
                        includes = ['**/*.cpp', '**/*.c']
                    }
                    exportedHeaders {
                        srcDirs = ['include', 'interchange/include', 'interchange/prebuild/include']
                        srcDirs += libraries.headers()
                        includes = ['**/*.hpp', '**/*.h']
                    }
                }
                resources(ToastResources) {
                    source.srcDirs "resources"
                }
            }
        }
    }
}

task build_interchange_js() {
	doLast {
		exec {
			workingDir 'interchange/ToastFWI'
			commandLine 'ruby', 'build_js.rb'
		}
		delete {
			delete 'resources/js/vendor/toast_fwi.min.js'
		}
		copy {
			from 'interchange/ToastFWI/build/js/bundle.js'
			rename 'bundle.js', 'toast_fwi.min.js'
			into 'resources/js/vendor'
		}
	}
}

task build_interchange_cpp() {
    doLast {
        exec {
            workingDir 'interchange/ToastFWI'
            commandLine 'ruby', 'build_cpp.rb'
        }
        delete 'interchange/prebuild'
        copy {
            from 'interchange/ToastFWI/build/cpp'
            into 'interchange/prebuild'
        }
    }
}

task build_interchange() {}
build_interchange.dependsOn(build_interchange_cpp)
build_interchange.dependsOn(build_interchange_js)
// We had to rewrite NTCore's build.gradle a little bit to fit into Toast's overall
// build system

ext.wpi_project_dir = project.projectDir

if (!isNoNTCore) {
    project(":wpi:nt") {
        // apply plugin: 'cpp'
        apply_cpp(project)

        model {
            components {
                ntcore(NativeLibrarySpec) {
                    component_spec(it, project)
                    
                    sources {
                        cpp {
                            source {
                                srcDirs = ['../ntcore/src']
                                includes = ['**/*.cpp']
                            }
                            exportedHeaders {
                                srcDirs = ['../ntcore/include', '../ntcore/src']
                                includes = ['**/*.h']
                            }
                        }
                    }

                    binaries.all {
                        if (toolChain in VisualCpp) {
                            cppCompiler.args '/EHsc', '/DNOMINMAX', '/D_SCL_SECURE_NO_WARNINGS', '/D_WINSOCK_DEPRECATED_NO_WARNINGS'
                            linker.args '/DEF:ntcore.def'
                        }
                    }
                }
            }
        }
    }
}

def _wpi = project(":wpi").file("allwpilib")

def libPattern = /lib(?<libName>.+).so$/
def niLibraryArgs = []
def niLibraryFileTree = fileTree(new File(_wpi, "ni-libraries").getAbsolutePath())

niLibraryFileTree.each { lib ->
    def nameMatcher = (lib.name =~ libPattern)
    if (nameMatcher) {
        def name = nameMatcher.group('libName')
        if (!(name.equals("wpi") || name.equals("wpi_2015"))) {            // libwpi.so and libwpi_2015.so both depend on the libraries that we're building right now
            niLibraryArgs << '-l' + name
        }
    }
}

if (isRoboRIO) {
    project(":wpi:wpilib") {
        // apply plugin: 'cpp'
        apply_cpp(project)

        ext.roborio_binary = true
        ext.ignore_copy = true      // This library is always statically linked, no need to copy shared lib

        model {
            repositories {
                libs(PrebuiltLibraries) { libs ->
                    niLibraryFileTree.forEach { niLib ->
                        libs.create(niLib) {
                            binaries.withType(SharedLibraryBinary) {
                                sharedLibraryFile = file(niLib.path)
                            }
                        }
                    }
                }
            }

            components {
                wpilib(NativeLibrarySpec) {
                    component_spec(it, project)

                    binaries.all {
                        tasks.withType(CppCompile) {
                            linker.args << "-L" + new File(_wpi, "ni-libraries").getAbsolutePath()
                            linker.args.addAll(niLibraryArgs)
                        }
                    }

                    sources {
                        cpp {
                            source {
                                srcDirs = [
                                    new File(_wpi, "/wpilibc/shared/src"),
                                    new File(_wpi, "/wpilibc/Athena/src"),
                                    new File(_wpi, "/hal/lib/Athena"),
                                    new File(_wpi, "/hal/lib/Athena/FRC_FPGA_ChipObject"),
                                    new File(_wpi, "/hal/lib/Shared")
                                ]
                                includes = ['**/*.cpp']
                            }
                            exportedHeaders {
                                srcDirs = [
                                    new File(_wpi, "/wpilibc/shared/include"),
                                    new File(_wpi, "/wpilibc/Athena/include"),
                                    new File(_wpi, "/hal/include"),
                                    new File(_wpi, "/hal/lib/Athena"),
                                    new File(_wpi, "/hal/lib/Athena/FRC_FPGA_ChipObject"),
                                    new File(_wpi, "/hal/lib/Shared")
                                ]
                                includes = ['**/*.h', '**/*.hpp']
                            }

                            lib project: ":wpi:nt", library: "ntcore", linkage: "shared"
                        }
                    }
                }
            }
        }
    }
}
def _provider = project(":Providers")

ext.apply_provider_model = { component, project, callback -> 
    component_spec(component, project)

    component.sources {
        cpp {
            source {
                srcDirs = [_provider.file("src/"), "src"]
                includes = ["**/*.cpp"]
            }
            exportedHeaders {
                srcDirs = [_provider.file("include/"), "include"]
                includes = ["**/*.hpp", "**/*.h"]
            }

            lib project: ":Toast-Core", library: "toast_core", linkage: "shared"
            lib project: ":Toast-Bootstrap", library: "toast_bootstrap", linkage: "shared"
            
            project.libraries.each { libr ->
                lib project: libr.project, library: libr.library, linkage: libr.linkage
            }
        }
    }
}

project(":Providers:simulation") {
    apply_cpp(project)

    ext.libraries = []

    model {
        components {
            provider_simulation(NativeLibrarySpec) {
                _provider.apply_provider_model(it, project, null)
            }
        }
    }
}

if (isRoboRIO) {
    project(":Providers:wpilib") {
        apply_cpp(project)

        ext.roborio_binary = true
        ext.libraries = [[
            project: ":wpi:wpilib", library: "wpilib", linkage: "static"
        ],[
            project: ":wpi:nt", library: "ntcore", linkage: "shared"
        ]]

        model {
            components {
                provider_wpilib(NativeLibrarySpec) {
                    _provider.apply_provider_model(it, project, null)
                }
            }
        }
    }
}


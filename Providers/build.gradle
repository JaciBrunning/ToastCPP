def _provider = project(":Providers")

ext.apply_model = { project, callback -> 
    project.model {
        components {
            toast_hardware_provider(NativeLibrarySpec) {
                component_spec(it, project)

                sources {
                    cpp {
                        source {
                            srcDirs = [_provider.file("src/"), "src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = [_provider.file("include/"), "include"]
                            includes = ["**/*.hpp", "**/*.h"]
                        }
                        lib project: ":wpi:nt", library: "ntcore", linkage: "shared"
                        lib project: ":Toast-Core", library: "toast_core", linkage: "shared"
                        project.libraries.forEach { libr ->
                            lib project: libr.project, library: libr.library, linkage: libr.linkage
                        }
                    }
                }
            }
        }
    }
}

project(":Providers:simulation") {
    apply_cpp(project)

    ext.libraries = []

    apply_model(project, null)
}

if (isRoboRIO) {
    project(":Providers:wpilib") {
        apply_cpp(project)

        ext.roborio_binary = true
        ext.libraries = [[
            project: ":wpi:wpilib", library: "wpilib", linkage: "static"
        ]]

        apply_model(project, null)
    }
}


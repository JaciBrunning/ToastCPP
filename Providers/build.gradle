def _provider = project(":Providers")

project(":Providers:simulation") {
    model {
        components {
            provider_simulation(NativeLibrarySpec) {
                component_spec(it, project)
                targetPlatform "roborio-arm"
                targetPlatform "any-32"
                targetPlatform "any-64"
                sources.cpp {
                    source {
                        srcDirs = ["src", _provider.file("src/")]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["include", _provider.file("include/")]
                        includes = ["**/*.hpp", "**/*.h"]
                    }

                    lib project: ":Toast-Core", library: "toast_core", linkage: "shared"
                    lib project: ":Toast-Bootstrap", library: "toast_bootstrap", linkage: "shared"
                }
            }
        }
    }
}

project(":Providers:wpilib") {
    model {
        libraries {
            wpilib_submodule(LibraryPrebuilt) {
                // Usually we would compile against the GradleRIO WPILib target, however since we're
                // wanting to use WPILib from a submodule, we have to link it manually
                headers = "../../wpi/wpilib/build/include"
                staticFile = "../../wpi/wpilib/build/lib/libwpi.so"
            }
        }

        task buildAdapter() {
            dependsOn ":wpi:wpilib:deferBuild"
        }

        components {
            provider_wpilib(NativeLibrarySpec) {
                component_spec(it, project)
                targetPlatform "roborio-arm"
                binaries.withType(NativeBinarySpec) {
                    tasks.withType(CppCompile) {
                        dependsOn buildAdapter
                        // libwpi.so is actually a group of multiple libraries
                        linker.args << "-L../../wpi/wpilib/build/lib"
                    }
                }
                sources.cpp {
                    source {
                        srcDirs = ["src", _provider.file("src/")]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["include", _provider.file("include/")]
                        includes = ["**/*.hpp", "**/*.h"]
                    }

                    lib project: ":Toast-Core", library: "toast_core", linkage: "shared"
                    lib project: ":Toast-Bootstrap", library: "toast_bootstrap", linkage: "shared"
                    lib library: "wpilib_submodule", linkage: "static"
                }
            }
        }
    }
}